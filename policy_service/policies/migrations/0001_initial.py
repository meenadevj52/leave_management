# Generated by Django 5.2.7 on 2025-10-30 07:57

import django.db.models.deletion
import django.utils.timezone
import policies.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tenant_id', models.UUIDField(db_index=True)),
                ('policy_name', models.CharField(max_length=255)),
                ('policy_type', models.CharField(db_index=True, max_length=50)),
                ('major_version', models.IntegerField(default=1)),
                ('minor_version', models.IntegerField(default=0)),
                ('version', models.CharField(editable=False, max_length=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('applies_to', models.JSONField(blank=True, default=list)),
                ('excludes', models.JSONField(blank=True, default=list)),
                ('entitlement', models.JSONField(blank=True, default=dict)),
                ('carry_forward', models.IntegerField(default=0)),
                ('carry_forward_priority', models.BooleanField(default=True, help_text='If system prioritizes carry-forward before encashment')),
                ('encashment', models.IntegerField(default=0)),
                ('encashment_priority', models.BooleanField(default=False, help_text='If system should prioritize encashment first')),
                ('calculation_base', models.CharField(choices=[('PER_DAY_SALARY', 'Per Day Wise Salary'), ('PER_HOUR_SALARY', 'Per Hour Salary'), ('MONTHLY_BASIC_SALARY', 'Monthly Basic Salary'), ('MONTHLY_GROSS_SALARY', 'Monthly Gross Salary')], default='PER_DAY_SALARY', help_text='Defines how salary is used for encashment calculation', max_length=50)),
                ('multiplier', models.FloatField(default=1.0, help_text='Multiplier for encashment calculation (e.g., 1.5x salary)')),
                ('notice_period', models.IntegerField(default=0)),
                ('limit_per_month', models.IntegerField(default=0)),
                ('reset_leave_counter', models.CharField(choices=[('BEGINNING_OF_YEAR', 'Beginning of Year'), ('EMPLOYMENT_ANNIVERSARY', 'Employment Anniversary'), ('CONTINUOUS', 'Continuous (No Reset)')], default='BEGINNING_OF_YEAR', help_text='When leave balances reset each year', max_length=50)),
                ('employment_duration', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('6_MONTHS', '6 Months'), ('1_YEAR', '1 Year'), ('2_YEARS', '2 Years'), ('CUSTOM', 'Custom')], default='IMMEDIATE', help_text='Minimum service period to qualify for this policy', max_length=50)),
                ('employment_duration_custom_days', models.IntegerField(default=0, help_text='Custom duration in days if employment_duration is CUSTOM')),
                ('can_apply_previous_date', models.BooleanField(default=False)),
                ('document_required', models.BooleanField(default=False)),
                ('allow_multiple_day', models.BooleanField(default=True)),
                ('allow_half_day', models.BooleanField(default=True)),
                ('allow_comment', models.BooleanField(default=True, help_text='Whether users can add comments in leave request')),
                ('request_on_notice_period', models.BooleanField(default=True)),
                ('change_description', models.TextField(blank=True, help_text='Description of changes made in this version', null=True)),
                ('approval_route', models.JSONField(blank=True, default=list, help_text="Ordered list of roles required for approval, e.g., ['HR_MANAGER', 'CHRO']")),
                ('conditions', models.JSONField(blank=True, default=policies.models.get_default_conditions, help_text='List of structured validation rules for leave requests')),
                ('current_approval_step', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('PENDING_APPROVAL', 'Pending Approval'), ('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUPERSEDED', 'Superseded'), ('REJECTED', 'Rejected')], default='PENDING_APPROVAL', max_length=20)),
                ('is_active', models.BooleanField(default=False)),
                ('created_by', models.UUIDField()),
                ('updated_by', models.UUIDField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['tenant_id', 'policy_type', 'is_active'], name='policies_po_tenant__2b111d_idx'), models.Index(fields=['status'], name='policies_po_status_83d281_idx')],
                'unique_together': {('tenant_id', 'policy_type', 'major_version', 'minor_version')},
            },
        ),
        migrations.CreateModel(
            name='PolicyAudit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('old_value', models.JSONField(blank=True, null=True)),
                ('new_value', models.JSONField(blank=True, null=True)),
                ('update_type', models.CharField(max_length=50)),
                ('timestamp_utc', models.DateTimeField(default=django.utils.timezone.now)),
                ('initiator_id', models.UUIDField()),
                ('initiator_role', models.CharField(blank=True, max_length=50)),
                ('initiator_name', models.CharField(blank=True, max_length=100)),
                ('reason', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audits', to='policies.policy')),
            ],
            options={
                'ordering': ['-timestamp_utc'],
                'indexes': [models.Index(fields=['policy', '-timestamp_utc'], name='policies_po_policy__383757_idx')],
            },
        ),
    ]
